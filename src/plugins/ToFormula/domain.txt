domain WebGME
{
MetaNode ::= new (name: String).
MetaEdge ::= new (name: String, src: MetaNode, dst: MetaNode, ms: Multiplicity, md: Multiplicity).
Multiplicity ::= new (low: Natural, high: Natural + {"*"}).

Node ::= new (name: String, type: MetaNode).
Edge ::= new (name: String, type: MetaEdge, src: Node, dst: Node).

NodeInheritance ::= new (base: MetaNode, instance: MetaNode + Node).
NodeInstanceOf ::= (MetaNode, MetaNode + Node).
NodeInstanceOf(b,i) :- NodeInheritance(b,i) ; NodeInheritance(b,m), NodeInstanceOf(m,i).

WrongMultiplicity :- Multiplicity(low,high), high != "*", low > high.

not1 :- n is Node, no {m | m is MetaNode, NodeInstanceOf(m,n)}.
not2 :- e is Edge, no {m | m is MetaEdge, m = e.type, NodeInstanceOf(m.src,e.src)}.
not3 :- e is Edge, no {m | m is MetaEdge, m = e.type, NodeInstanceOf(m.dst,e.dst)}.
not4a :- n is Node, m is MetaEdge, NodeInstanceOf(m.src,n), count({s|s is Node, e is Edge (_,m,n,s)}) < m.md.low.
not4b :- n is Node, m is MetaEdge, NodeInstanceOf(m.src,n), m.md.high != "*", count({s|s is Node, e is Edge (_,m,n,s)}) > m.md.high.
not4 :- not4a, not4b.
not5 :- m is MetaEdge, n is Node, NodeInstanceOf(m.src,n), m.md.low != 0, no{e | e is Edge(_,m,n,_)}.
not6a :- n is Node, m is MetaEdge, NodeInstanceOf(m.dst,n), count({s|s is Node, e is Edge (_,m,s,n)}) < m.ms.low.
not6b :- n is Node, m is MetaEdge, NodeInstanceOf(m.dst,n), m.ms.high != "*", count({s|s is Node, e is Edge (_,m,s,n)}) > m.ms.high.
not6 :- not6a, not6b.
not7 :- m is MetaEdge, n is Node, NodeInstanceOf(m.dst,n), m.ms.low != 0, no{e | e is Edge(_,m,_,n)}.

conforms no WrongMultiplicity, no not1, no not2, no not3, no not4, no not5, no not6, no not7.


 //// User defined extra constraints: (conforms has to be updated properly to work)

}
