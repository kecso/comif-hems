/*globals define*/
/*eslint-env node, browser*/

/**
 * Generated by PluginGenerator 2.16.0 from webgme on Thu May 03 2018 22:34:46 GMT-0500 (Central Daylight Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'ejs',
    'text!./domain.txt',
    'text!./meta.ejs'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase,
    ejs,
    DOMAIN,
    metaTemplate) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of ToFormula.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin ToFormula.
     * @constructor
     */
    var ToFormula = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    ToFormula.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    ToFormula.prototype = Object.create(PluginBase.prototype);
    ToFormula.prototype.constructor = ToFormula;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    ToFormula.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            concept,
            conceptObject,
            nodeObject,
            keys,i,j,target,meta,
            p2c = {},
            parameters={},
            formula = DOMAIN;


        nodeObject = self.activeNode;

        for(concept in self.META) {
            p2c[self.core.getPath(self.META[concept])] = concept;
        }

        parameters.name = self.core.getAttribute(nodeObject,'name');
        parameters.concepts=[];
        for(concept in self.META){
            conceptObject = {
                name: concept,
                attr: {},
                ptr:{},
                set:{},
                bases:[]
            };

            keys = self.core.getOwnValidAttributeNames(self.META[concept]);
            for(i=0;i<keys.length;i+=1){
                conceptObject.attr[keys[i]] = self.core.getAttributeMeta(self.META[concept],keys[i]).type || 'string';
            }

            keys = self.core.getOwnValidPointerNames(self.META[concept]);
            for(i=0;i<keys.length;i+=1){
                //TODO merge all together for better quality
                conceptObject.ptr[keys[i]] = p2c[self.core.getOwnValidTargetPaths(self.META[concept],keys[i])[0]];
                if(!conceptObject.ptr[keys[i]]){
                    delete conceptObject.ptr[keys[i]];
                }
            }

            keys = self.core.getOwnValidSetNames(self.META[concept]);
            for(i=0;i<keys.length;i+=1){
                target = p2c[self.core.getOwnValidTargetPaths(self.META[concept],keys[i])[0]];
                if(target){
                    meta = self.core.getPointerMeta(self.META[concept],keys[i]);
                    for(j in meta){
                        if(p2c[j] == target){
                            conceptObject.set[keys[i]] = {
                                target:target,
                                md:{min:meta[j].min,max:meta[j].max}
                            }
                        }
                    }
                }
            }

            parameters.concepts.push(conceptObject);
        }

        console.log(parameters);
        formula+=ejs.render(metaTemplate,parameters);
        console.log(formula);
        self.result.setSuccess(true);
        callback(null, self.result);
    };

    return ToFormula;
});
