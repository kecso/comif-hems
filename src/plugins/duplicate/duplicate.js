/*globals define*/
/*eslint-env node, browser*/

/**
 * Generated by PluginGenerator 2.16.0 from webgme on Fri May 04 2018 21:41:12 GMT-0500 (Central Daylight Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase'
], function (PluginConfig,
             pluginMetadata,
             PluginBase) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of duplicate.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin duplicate.
     * @constructor
     */
    var duplicate = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    duplicate.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    duplicate.prototype = Object.create(PluginBase.prototype);
    duplicate.prototype.constructor = duplicate;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    duplicate.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            parent = self.activeNode;


        self.core.loadChildren(parent)
            .then(function (children) {
                self.core.copyNodes(children, parent);
                self.save('duplicate updated model.')
                    .then(function () {
                        self.result.setSuccess(true);
                        callback(null, self.result);
                    })
                    .catch(function (err) {
                        // Result success is false at invocation.
                        callback(err, self.result);
                    });
            })
            .catch(callback);
    };

    return duplicate;
});
